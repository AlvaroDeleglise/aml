{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Prerequisits"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Python and package managers\n",
    "\n",
    "As the title indicates, we will be doing all our work in Python. Python has become the de-facto standard language for machine learning and data science, with $R$ being the other major community in the space.\n",
    "The book will assume that you're at least somewhat familiar with Python, though we won't be needing any advanced features of the language. If you're new to Python, there are plenty of resources online.\n",
    "In particular for data science, I highly recommend the [Python Data Science Handbook](https://jakevdp.github.io/PythonDataScienceHandbook/) by Jake VanderPlas, which discusses the environments and libraries described below in much more detail.\n",
    "\n",
    "```{margin}\n",
    "If you don't want to get the whole Anaconda package you which you can also get conda by installing [miniconda](https://docs.conda.io/en/latest/miniconda.html). You can also stick to ``pip`` if you don't want to mess with two package managers, though using conda often makes things a bit easier.\n",
    "```\n",
    "\n",
    "If you don't have a working installation of Python, the easiest way to get one is probably by downloading the free [Anaconda Python distribution](https://www.anaconda.com/products/individual), which is available for Windows, Linux and OS X.\n",
    "Make sure to get the latest version of Python (3.7 as of this writing, 3.6 is still fine, I wouldn't use anything older) and the 64 bit version. Anaconda comes with the ``conda`` package manager which is a widely used alternative to the standard python package manager ``pip``.\n",
    "Whether you use Anaconda or not, make sure you create a new virtual environment for your data science work. In particular, **don't use your system Python**, i.e. the one that is installed by your operating system. Trying to install data science packages into your system Python is a great way to mess up the normal functioning of your computer.\n",
    "\n",
    "## Jupyter Notebooks\n",
    "Jupyter is an interactive, browser-based coding environment that lends itself amazingly well for the iterative, exploratory process of data science.\n",
    "It also enables literate programming by mixing code with other media, like markdown text.\n",
    "In fact, this book has been written entirely in Jupyter notebook, and it's available in it's entirety at [github.com/amueller/aml](https://github.com/amueller/aml). While you can use an IDE such as Spyder, PyCharm or VSCode, which all have great Python support, I recommend using Jupyter, or the newer iteration of the interface, Jupyter Lab for working through the examples in this book and starting your machine learning journey.\n",
    "\n",
    "```{margin}\n",
    "A great feature of Jupyter is to allow running code cells out of order.\n",
    "However, that can make it hard to reproduce some experiments. It's a good idea to do a \"restart kernel and run all cells\" periodically to see that your code is complete and your experiments reproduce.\n",
    "```\n",
    "For more extensive projects, and for production use, using standard Python scripts is beneficial, as they are more easily managed with version control and more easily tested. At what point you should transition from notebooks to Python scripts, and which is better for what purpose, is the topic of a lively debate within the PyData community.\n",
    "\n",
    "If you are using Anaconda, you should be able to start Jupyter Lab from a console by executing ``jupyter lab`` (on any operating system), or via the Anaconda navigator (on OS X and Windows).\n",
    "\n",
    "\n",
    "## Managing Python environments\n",
    "Whether you're using Jupyter or an IDE and whether you're using Anaconda or not, working with multiple Python environments is often a source of frustration for those that are new to Python (or even those that have been working with it for years).\n",
    "Whenever you install a package, it is installed into a particular *Python virtual environment* that corresponds to a particular version of Python together with a set of installed libraries. You can think of it as a light variant of a container or virtual machine.\n",
    "It's very likely that your machine has more than one Python environment, and if you run a ``pip`` or ``conda`` command on the command line, it might run in a different environment than what is used in your Jupyter Notebooks, which again might be different from what is used in your IDE.\n",
    "The most common symptom of this is your IDE or Jupyter complaining ``no package sklearn`` when you just ran ``conda install sklearn`` and it successfully installed.\n",
    "IDEs with good Python support, like the ones I mentioned above, allow you to configure easily which environment you want to run your code in. Jupyter has the concept of *kernels* which allow you to run code in different environments.\n",
    "A great overview of the topic is provided in the blogpost [Installing Python packages for Jupyter](https://jakevdp.github.io/blog/2017/12/05/installing-python-packages-from-jupyter/) by Jake VanderPlas.\n",
    "\n",
    "## Hosted platforms\n",
    "If you don't want to (or can't) setup a Python environment on your machine, there are many options for hosted environments, often with substantial computational power.\n",
    "Most cloud providers offer free hosted Jupyter notebooks, notably [Google Colab](https://colab.research.google.com/) (which even allows free access to GPUs), [Azure Notebooks](https://notebooks.azure.com/), and [Amazon SageMaker](https://aws.amazon.com/sagemaker/) (which only seems to have a very limited free offering). A more community driven effort is [binder](https://mybinder.org/), and there are countless other platforms that provide (sometimes free) access to hosted Jupyter notebooks. Worth mentioning here are [kaggle kernels](https://www.kaggle.com/kernels), which are an integration of Colab into the Kaggle machine learning community, where many interesting data science and machine learning applications are posted (with a wide spectrum of quality).\n",
    "As of this writing, both Google Colab and Azure notebooks provide ready-to-use solutions that require basically no effort to get started.\n",
    "\n",
    "## Packages\n",
    "Now that you have your environment up and running and picked your interface of choice, I want to discuss the libraries we will be using. If you're using anaconda or any of the hosted services, they will already be installed for you.``"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### NumPy\n",
    "[NumPy](https://numpy.org/doc/1.18/user/quickstart.html) is the Python library that provides efficient implementation of multi-dimensional arrays. NumPy ndarrays are the internal data structure used for most of scikit-learn, and we will be using it extensively in this book.\n",
    "I will assume you are familiar with array creation and indexing, which you can read up on [in the documentation](https://numpy.org/devdocs/user/basics.indexing.html)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1., 0., 0., 0., 0., 0., 0.],\n",
       "       [0., 1., 0., 0., 0., 0., 0.],\n",
       "       [0., 0., 1., 0., 0., 0., 0.],\n",
       "       [0., 0., 0., 1., 0., 0., 0.],\n",
       "       [0., 0., 0., 0., 1., 0., 0.],\n",
       "       [0., 0., 0., 0., 0., 1., 0.],\n",
       "       [0., 0., 0., 0., 0., 0., 1.]])"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "# create a diagonal matrix with ones on the diagonal that's 5x5\n",
    "X = np.eye(7)\n",
    "# show the result in Jupyter\n",
    "X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'numpy.ndarray'> (7, 7)\n"
     ]
    }
   ],
   "source": [
    "# show the class of X, and the shape of X\n",
    "print(type(X), X.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### SciPy\n",
    "Another fundamental library that provides data structures and algorithm is [SciPy](https://docs.scipy.org/doc/scipy/reference/). SciPy is a bit of a hodge-pot of many different scientific algorithms, but we will mostly use it for its implementation of sparse matrices, i.e. two-dimensional arrays where most entries are zero."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<7x7 sparse matrix of type '<class 'numpy.float64'>'\n",
       "\twith 7 stored elements in Compressed Sparse Row format>"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import scipy as sp\n",
    "# If a matrix has many zeros, sparse matrices are an efficient representation.\n",
    "# Here, we're creating a matrix in the Compressed Sparse Row (CSR) format from the diagonal numpy array X\n",
    "X_sp = sp.sparse.csr_matrix(X)\n",
    "X_sp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1., 0., 0., 0., 0., 0., 0.],\n",
       "       [0., 1., 0., 0., 0., 0., 0.],\n",
       "       [0., 0., 1., 0., 0., 0., 0.],\n",
       "       [0., 0., 0., 1., 0., 0., 0.],\n",
       "       [0., 0., 0., 0., 1., 0., 0.],\n",
       "       [0., 0., 0., 0., 0., 1., 0.],\n",
       "       [0., 0., 0., 0., 0., 0., 1.]])"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Scipy sparse matrices can be converted to numpy arrays with the toarray method\n",
    "# This is usually a bad idea, as it requires much more memory than the sparse representation,\n",
    "# but can be useful for debugging.\n",
    "X_sp.toarray()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Matplotlib\n",
    "[Matplotlib](https://matplotlib.org/index.html) is the primary plotting library in Python, and we'll use it extensively for most of our visualization needs. I'm a big fan of visual exploration of data and visual teaching, so the book might contain more matplotib code than scikit-learn code.\n",
    "Mtplotlib is the foundation of most plotting in Python, but sometimes it's more convenient to use more specialized visualization tools build on top of matplotlib. Pandas and scikit-learn have built-in plotting functionality that used matplotlib under the hood.\n",
    "Understanding matplotlib is important to use these tools well.\n",
    "There are alternative plotting libraries for Python, in particular altair, plotly and bokeh. All three are much more recent than matplotlib, and altair and plotly are particularly designed for data science applications, while matplotlib was designed more broadly for scientific plotting. So you might find them more convenient to use. For this book, we'll stick with matplotlib as it's mature and widely used.\n",
    "It's important to know that while pandas plotting builds on matplotlib, matplotlib knows nothing about pandas, and always operates on the underlying numpy arrays."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.colorbar.Colorbar at 0x1d8b9089948>"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "# show a heat map plot of the diagonal numpy array\n",
    "plt.imshow(X)\n",
    "# add a color bar to the plot\n",
    "plt.colorbar()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "axes.shape (2, 3)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x1d8b8d26ac8>"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 6 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# I love using subplots! It allows you to create regular grids of plots.\n",
    "# The whole thing is called the figure, while each subplot is called and axes (not axis)\n",
    "figure, axes = plt.subplots(2, 3)\n",
    "# axes is a numpy array of shape 2 x 3:\n",
    "print(\"axes.shape\", axes.shape)\n",
    "# instead of using plt.matshow, we can directly plot into one of the axes:\n",
    "axes[0, 2].imshow(X)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Pandas\n",
    "[Pandas](https://pandas.pydata.org/pandas-docs/stable/) is maybe the most widely use package in datascience in Python. It builds upon NumPy and provides the ``DataFrame`` datastructure, which is a convenient representation of a table, including column names and row indices.\n",
    "In contrast to NumPy ndarrays, which assume all entries have the same data type (aka ``dtype``, such as float or int), pandas allows each column in the data to have a different ``dtype``. Pandas also extends the handling of missing values and implements a categorical data type (which doesn't exit in NumPy). Pandas also contains functionality for processing and merging tables, data visualization and reading and writing common data formats and databases.\n",
    "We will represent most of the data in the book using pandas."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     0    1    2    3    4    5    6\n",
       "0  1.0  0.0  0.0  0.0  0.0  0.0  0.0\n",
       "1  0.0  1.0  0.0  0.0  0.0  0.0  0.0\n",
       "2  0.0  0.0  1.0  0.0  0.0  0.0  0.0\n",
       "3  0.0  0.0  0.0  1.0  0.0  0.0  0.0\n",
       "4  0.0  0.0  0.0  0.0  1.0  0.0  0.0\n",
       "5  0.0  0.0  0.0  0.0  0.0  1.0  0.0\n",
       "6  0.0  0.0  0.0  0.0  0.0  0.0  1.0"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# often you'll read your data from disk, but you can also create it in other ways\n",
    "import pandas as pd\n",
    "# we can create a dataframe from a numpy ndarray\n",
    "X_df = pd.DataFrame(X)\n",
    "# the resulting dataframe will have numbered rows and columns\n",
    "X_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>first</th>\n",
       "      <th>second</th>\n",
       "      <th>third</th>\n",
       "      <th>fourth</th>\n",
       "      <th>fifth</th>\n",
       "      <th>sixth</th>\n",
       "      <th>seventh</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   first  second  third  fourth  fifth  sixth  seventh\n",
       "0    1.0     0.0    0.0     0.0    0.0    0.0      0.0\n",
       "1    0.0     1.0    0.0     0.0    0.0    0.0      0.0\n",
       "2    0.0     0.0    1.0     0.0    0.0    0.0      0.0\n",
       "3    0.0     0.0    0.0     1.0    0.0    0.0      0.0\n",
       "4    0.0     0.0    0.0     0.0    1.0    0.0      0.0"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# often, giving names is nicer\n",
    "X_df_named = pd.DataFrame(X, columns=['first', 'second', 'third', 'fourth', 'fifth', 'sixth', 'seventh'])\n",
    "# If our dataset is big, we also might want to limit the number of rows shown\n",
    "# The easiest way for that is using the head method, which by default gives us the first 5 rows\n",
    "X_df_named.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>uniform random numbers</th>\n",
       "      <th>normally distributed random numbers</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.313737</td>\n",
       "      <td>1.603174</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.919483</td>\n",
       "      <td>-1.199323</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.238195</td>\n",
       "      <td>0.991240</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.677885</td>\n",
       "      <td>-0.381042</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.691179</td>\n",
       "      <td>-1.871079</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>995</th>\n",
       "      <td>0.803233</td>\n",
       "      <td>0.160784</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>996</th>\n",
       "      <td>0.399651</td>\n",
       "      <td>-1.440656</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>997</th>\n",
       "      <td>0.006092</td>\n",
       "      <td>0.582749</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>998</th>\n",
       "      <td>0.953888</td>\n",
       "      <td>1.532094</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999</th>\n",
       "      <td>0.443370</td>\n",
       "      <td>1.032746</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1000 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     uniform random numbers  normally distributed random numbers\n",
       "0                  0.313737                             1.603174\n",
       "1                  0.919483                            -1.199323\n",
       "2                  0.238195                             0.991240\n",
       "3                  0.677885                            -0.381042\n",
       "4                  0.691179                            -1.871079\n",
       "..                      ...                                  ...\n",
       "995                0.803233                             0.160784\n",
       "996                0.399651                            -1.440656\n",
       "997                0.006092                             0.582749\n",
       "998                0.953888                             1.532094\n",
       "999                0.443370                             1.032746\n",
       "\n",
       "[1000 rows x 2 columns]"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Another favorite is creating dataframes from dictionaries of one-dimensional arrays.\n",
    "# We create two columns, with 1000 entries each, using two different random number distributions\n",
    "X_dict2df = pd.DataFrame({'uniform random numbers': np.random.uniform(size=1000),\n",
    "                          'normally distributed random numbers': np.random.normal(size=1000)})\n",
    "X_dict2df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'counts')"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# pandas has some convenient built-in plotting which automatically labels everything.\n",
    "# Here we compute a histogram for each column.\n",
    "# By default, hist uses 10 bins, instead we pick them automagically\n",
    "axes = X_dict2df.hist(bins='auto')\n",
    "\n",
    "# pandas plotting returns the matplotlib axes that were created, and we can modify them afterwards\n",
    "axes[0, 0].set_ylabel(\"counts\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Seaborn\n",
    "[Seaborn](http://seaborn.pydata.org/) is a plotting library that provides read-made statistical data visualizations, using matplotlib and pandas.\n",
    "In some ways, the package is quite opinionated, which makes some complex plots very easy, and generates beautiful plots.\n",
    "However, while seaborn is very powerful, it might sometimes be a bit tricky to arrive at exactly the plot you're looking for sometimes. There are some [great tutorials](http://seaborn.pydata.org/tutorial.html) to get you started, though."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['carat', 'cut', 'color', 'clarity', 'depth', 'table', 'price', 'x', 'y',\n",
      "       'z'],\n",
      "      dtype='object')\n",
      "(53940, 10)\n"
     ]
    }
   ],
   "source": [
    "# seaborn is traditionally imported as sns. Better not ask why.\n",
    "import seaborn as sns\n",
    "\n",
    "# we're loading the built-in diamonds dataset, a favorite of every visualization expert, into a pandas DataFrame\n",
    "# it contains prices and quality criteria for thousands of diamond sales. \n",
    "diamonds = sns.load_dataset(\"diamonds\")\n",
    "print(diamonds.columns)\n",
    "print(diamonds.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1128.22x216 with 5 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# creating a FacetGrid allows grouping the data\n",
    "# and mapping columns to rows, columns or hue\n",
    "g = sns.FacetGrid(diamonds, col=\"cut\", hue=\"color\")\n",
    "# each entry then calls a plot command for the particular group\n",
    "# Here we're calling scatter, specify the columns for each axis.\n",
    "# We also pass parameters 's' for marker size and 'alpha' for transparency\n",
    "# to reduce overplotting (somewhat).\n",
    "g.map(plt.scatter, \"carat\", \"price\", s=1, alpha=.6)\n",
    "# a legend is added elegantly only once per grid\n",
    "g.add_legend();"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Scikit-learn\n",
    "How to use [scikit-learn](http://scikit-learn.org/) will be the main topic of this book, and we will run though most of the functionality in detail in later chapters.\n",
    "Scikit-learn provides machine learning algorithms in a simple, consistent interface. Scikit-learn focusses has both supervised and unsupervised learning, though no active learning or reinforcement learning is included. Scikit-learn mostly deals with tabular data, though it has some basic text processing capabilities, which we'll discuss in chapter TODO. Apart from machine learning algorithms, scikit-learn also contains tools for data preprocessing, model evaluation and model selection.\n",
    "While scikit-learn has a wide varity of algorithms and tools, it does not include algorithms for time series, and neither does it provide modern deep learning algorithms.\n",
    "It's important to note that while scikit-learn accepts pandas DataFrames as inputs, most of scikit-learn is not aware of the additional information that is represented in the dataframe, such a column names or row indices, and just operates on the underlying NumPy ndarray."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Versions used\n",
    "\n",
    "```{margin}\n",
    "If you're adventurous, I encourage you to try out the development version of scikit-learn, which often has more features. Your feedback on the development version will help scikit-learn to become better.\n",
    "You can find instructions on [how to install the nightly build on the scikit-learn website](https://scikit-learn.org/dev/developers/advanced_installation.html#installing-nightly-builds).\n",
    "The documentation for the development version is hosted at [scikit-learn.org/dev](https://scikit-learn.org/dev).\n",
    "```\n",
    "\n",
    "This book was run with the following versions:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "System:\n",
      "    python: 3.7.6 (default, Jan  8 2020, 20:23:39) [MSC v.1916 64 bit (AMD64)]\n",
      "executable: C:\\Users\\t3kci\\anaconda3\\python.exe\n",
      "   machine: Windows-10-10.0.18362-SP0\n",
      "\n",
      "Python dependencies:\n",
      "       pip: 20.0.2\n",
      "setuptools: 46.2.0.post20200511\n",
      "   sklearn: 0.24.dev0\n",
      "     numpy: 1.18.1\n",
      "     scipy: 1.4.1\n",
      "    Cython: 0.29.17\n",
      "    pandas: 1.0.3\n",
      "matplotlib: 3.1.3\n",
      "    joblib: 0.14.1\n",
      "\n",
      "Built with OpenMP: True\n"
     ]
    }
   ],
   "source": [
    "from sklearn import show_versions\n",
    "show_versions()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "However, it is likely to run with many other configurations. The most important part is to make sure to use the most recent version of scikit-learn, which is 0.23 of this writing."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
